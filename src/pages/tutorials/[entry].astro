---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import HeroBlock from '@blocks/HeroBlock.astro'
import CardBlock from '@blocks/CardBlock.astro'
import CodeBlock from '@blocks/CodeBlock.astro'
import PageHeader from '@components/PageHeader.astro'
import RTE from '@blocks/RTE.astro'
import LinkComponent from '@components/LinkComponent.astro'
import SocialShares from '@components/SocialShares.astro'
import { getCollection } from 'astro:content'
import { Fragment } from 'astro/jsx-runtime'
import MarkdownIt from 'markdown-it'
import { Accordion, AccordionItem } from 'accessible-astro-components'
import type { CollectionEntry } from 'astro:content'
import ContentMedia from '@components/ContentMedia.astro'
import NewsList from '@components/blocks/NewsList.astro'

const md = new MarkdownIt()

function normalizeContent(raw) {
  // remove backslashes that PagesCMS injected
  return raw.replace(/\\#/g, '#')
}

export async function getStaticPaths() {
  const entries = await getCollection('entries')
  return entries.map((entry) => ({
    params: { entry: entry.id },
    props: { entry },
  }))
}

interface Props {
  entry: CollectionEntry<'entries'>
}

const { entry } = Astro.props
const blocks = entry.data.blocks || []

function formatDate(dateString) {
  const date = new Date(dateString);
  // console.log({date})
  // return date.toLocaleDateString("en-GB", {
  return date.toLocaleDateString("en-US", {
    day: "2-digit",
    // month: "short",
    month: "long",
    year: "numeric",
  });
}

function linkStyleClass(linkStyle: string) {
  switch (linkStyle) {
    case "button":
      return "button color-secondary";
    case "button2":
      return "button";
    default:
      return "";
  }
}


const author = {
  name: entry.data.author || 'Unknown Author',
  image: '/posts/post-image-1.png',
  bio: '',
  date: formatDate(entry.data.date) || '',
}
---

<DefaultLayout title={entry.data.title} description={entry.data.description}>
  <PageHeader title={entry.data.title} subtitle={entry.data.description} featuredImage={entry.data.image} author={author} bgType="bordered" />

  <main class="container mx-auto px-4 py-4">
    {
      blocks.length > 0 ? (
        blocks.map((block, index) => {
          switch (block._block) {
            case 'hero':
              return <HeroBlock key={`block-${index}`} {...block} />
            case 'card':
              return <CardBlock key={`block-${index}`} {...block} />
            case 'code':
              return (
                <CodeBlock
                  key={`block-${index}`}
                  code={typeof block.code === 'string' ? block.code : String(block.code || '')}
                  language={block.language?.toLowerCase() || 'javascript'}
                />
              )
            // case 'pageheader':
            //   return (
            //     <PageHeader
            //       key={`block-${index}`}
            //       title={block.title}
            //       subtitle={md.render(normalizeContent(block.subtitle?.content) ?? '')}
            //       bgType={block.bgType}
            //     />
            //   )
              case 'rtecontent':
                return (
                  <RTE
                    key={`block-${index}`}
                    content={md.render(normalizeContent(block.content?.content) ?? '')}
                  />
                )
              case 'accordion':
                return (
                  <Accordion key={`block-${index}`} allowMultiple={block.allowMultiple}>
                    {Array.isArray(block.items) &&
                      block.items.map((item, i) => (
                        <AccordionItem
                          key={`accordion-item-${i}`}
                          title={item.title}
                          variant={block.useChevron ? 'chevron' : undefined}
                        >
                          <Fragment set:html={md.render(item.content)} />
                        </AccordionItem>
                      ))}
                  </Accordion>
                )
              case 'imageText':
                return (
                  <ContentMedia
                    key={`block-${index}`}
                    imgSrc = {block.image},
                    reverseImg = {block.reverseImg}
                  >
                    {block.title && <h2>{block.title}</h2>}
                    {block.text &&
                      <p class="text-2xl">
                        {block.text}
                      </p>
                    }
                    {block.linkText && block.linkUrl && <LinkComponent class={linkStyleClass(block.linkStyle)}  href={block.linkUrl} internal={block.linkInternal}>{block.linkText}</LinkComponent>}
                  </ContentMedia>
                )
              // case 'news':
              //   return <NewsList key={`block-${index}`} items={block.items} />
              // case 'link':
              //   return (
              //     <div class="container -mt-6">
              //       <LinkComponent key={`block-${index}`} class={block.class} href={block.href} title={block.title} internal={block.internal} showArrow={block.showArrow}>{block.content}</LinkComponent>
              //     </div>
              //   )
            default:
              return null
          }
        })
      ) : (
        <p class="py-8 text-center">No blocks added to this entry yet.</p>
      )
    }
  </main>

  <section class="my-12">
    <div class="narrow space-content container">
      <h2>Share this entry</h2>
      <p>Like this entry? Share it with your network!</p>
      <SocialShares />
    </div>
  </section>
</DefaultLayout>

<style lang="scss" is:global>
  .narrow {
    margin-inline: auto;
    max-width: 65ch;
  }

  .avatar p.subtitle {
    margin: 0;
  }

</style>
