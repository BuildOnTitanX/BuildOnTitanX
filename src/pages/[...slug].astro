---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import HeroBlock from '@blocks/HeroBlock.astro'
import CardBlock from '@blocks/CardBlock.astro'
import CodeBlock from '@blocks/CodeBlock.astro'
import PageHeader from '@components/PageHeader.astro'
import { Accordion, AccordionItem } from 'accessible-astro-components'
import { Fragment } from 'astro/jsx-runtime'
import { getEntry, getCollection } from 'astro:content'
import MarkdownIt from 'markdown-it'

const md = new MarkdownIt()

export async function getStaticPaths() {
  const pages = await getCollection('pages')
  return pages.map((page) => ({
    params: { slug: page.id },
    props: { page },
  }))
}

const { slug } = Astro.params
const entry = await getCollection('pages').then((pages) => pages.find((p) => p.id === slug))
console.log('Looking for entry:', fullSlug)
console.log('Found entry:', entry)

if (!entry) {
  throw new Error(`Page not found for slug: ${fullSlug}`)
}

const { data: frontmatter } = entry
const blocks = frontmatter.blocks ?? []
---

<DefaultLayout title={frontmatter.title ?? 'Untitled'}>
  <main class="container mx-auto px-4 py-8">
    {
      blocks.length > 0 ? (
        blocks.map((block, index) => {
          switch (block._block) {
            case 'hero':
              return <HeroBlock key={`block-${index}`} {...block} />
            case 'card':
              return <CardBlock key={`block-${index}`} {...block} />
            case 'code':
              return <CodeBlock key={`block-${index}`} code={block.code} language={block.language} />
            case 'pageheader':
              return (
                <PageHeader
                  key={`block-${index}`}
                  title={block.title}
                  subtitle={md.render(block.subtitle?.content ?? '')}
                  bgType={block.bgType}
                />
              )
            case 'accordion':
              return (
                <Accordion key={`block-${index}`} allowMultiple={block.allowMultiple}>
                  {Array.isArray(block.items) &&
                    block.items.map((item, i) => (
                      <AccordionItem
                        key={`accordion-item-${i}`}
                        title={item.title}
                        variant={block.useChevron ? 'chevron' : undefined}
                      >
                        <Fragment set:html={md.render(item.content)} />
                      </AccordionItem>
                    ))}
                </Accordion>
              )
            default:
              return null
          }
        })
      ) : (
        <p class="py-8 text-center">No blocks added yet. Please add content via the CMS.</p>
      )
    }
  </main>
</DefaultLayout>
