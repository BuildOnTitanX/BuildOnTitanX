---
import { Icon } from 'astro-icon/components'

/**
 * LinkComponent Component
 *
 * @description LinkComponent description
 */
interface Props {
  /**
   * Additional classes to apply to the LinkComponent
   */
  class?: string
  /**
   * The URL to link to
   */
  href: string
  /**
   * The Link title
   */
  title?: string
  /**
   * The Link Style (Button1, Button2, TextLink)
   */
  linkStyle?: string
  /**
   * The internal
   */
  internal?: boolean
  /**
   * showArrow right? (only if internal true)
   */
  showArrow?: boolean
}

function linkStyleClass(linkStyle: string) {
  switch (linkStyle) {
    case "button":
      return "button color-secondary";
    case "button2":
      return "button";
    default:
      return "";
  }
}

const { class: className, href, title, internal = false, showArrow = false, linkStyle = ''} = Astro.props
---

<a
  href={href}
  title={title}
  class:list={[className, !internal && 'external-link', linkStyleClass(linkStyle)]}
  {...(!internal ? { target: '_blank', rel: 'noopener noreferrer' } : {})}
>
  <slot />
  {!internal &&
    <Icon name="lucide:external-link" />
    <span class="sr-only">Opens in a new tab</span>
  }
  {internal && showArrow &&
    <Icon name="lucide:arrow-right" />
  }
</a>

<style>
  .external-link {
    display: inline-flex;
    align-items: center;
    gap: var(--space-3xs);
  }

  a,
  a:visited {
    [data-icon] {
      transition: translate var(--animation-speed-fast) var(--cubic-bezier);
    }

    [data-icon] {
      translate: 4px 0;
    }

    &:where(:hover, :focus) {
      [data-icon] {
        translate: 8px 0;
      }
    }
  }
</style>
